/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as KakaoImport } from './routes/kakao';
import { Route as TeacherRouteImport } from './routes/teacher/route';
import { Route as StudentRouteImport } from './routes/student/route';
import { Route as IndexImport } from './routes/index';
import { Route as SignupIndexImport } from './routes/signup/index';
import { Route as AuthIndexImport } from './routes/auth/index';
import { Route as TeacherUploadImport } from './routes/teacher/upload';
import { Route as TeacherStudentImport } from './routes/teacher/student';
import { Route as TeacherDocumentsImport } from './routes/teacher/documents';
import { Route as TeacherDashboardImport } from './routes/teacher/dashboard';
import { Route as TeacherContentImport } from './routes/teacher/content';
import { Route as StudentLibraryImport } from './routes/student/library';
import { Route as SignupTeacherImport } from './routes/signup/teacher';
import { Route as SignupStudentImport } from './routes/signup/student';
import { Route as TeacherViewerDocumentIdImport } from './routes/teacher/viewer/$documentId';

// Create/Update Routes

const KakaoRoute = KakaoImport.update({
  id: '/kakao',
  path: '/kakao',
  getParentRoute: () => rootRoute,
} as any);

const TeacherRouteRoute = TeacherRouteImport.update({
  id: '/teacher',
  path: '/teacher',
  getParentRoute: () => rootRoute,
} as any);

const StudentRouteRoute = StudentRouteImport.update({
  id: '/student',
  path: '/student',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const SignupIndexRoute = SignupIndexImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any);

const TeacherUploadRoute = TeacherUploadImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => TeacherRouteRoute,
} as any);

const TeacherStudentRoute = TeacherStudentImport.update({
  id: '/student',
  path: '/student',
  getParentRoute: () => TeacherRouteRoute,
} as any);

const TeacherDocumentsRoute = TeacherDocumentsImport.update({
  id: '/documents',
  path: '/documents',
  getParentRoute: () => TeacherRouteRoute,
} as any);

const TeacherDashboardRoute = TeacherDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => TeacherRouteRoute,
} as any);

const TeacherContentRoute = TeacherContentImport.update({
  id: '/content',
  path: '/content',
  getParentRoute: () => TeacherRouteRoute,
} as any);

const StudentLibraryRoute = StudentLibraryImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => StudentRouteRoute,
} as any);

const SignupTeacherRoute = SignupTeacherImport.update({
  id: '/signup/teacher',
  path: '/signup/teacher',
  getParentRoute: () => rootRoute,
} as any);

const SignupStudentRoute = SignupStudentImport.update({
  id: '/signup/student',
  path: '/signup/student',
  getParentRoute: () => rootRoute,
} as any);

const TeacherViewerDocumentIdRoute = TeacherViewerDocumentIdImport.update({
  id: '/viewer/$documentId',
  path: '/viewer/$documentId',
  getParentRoute: () => TeacherRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/student': {
      id: '/student';
      path: '/student';
      fullPath: '/student';
      preLoaderRoute: typeof StudentRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/teacher': {
      id: '/teacher';
      path: '/teacher';
      fullPath: '/teacher';
      preLoaderRoute: typeof TeacherRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/kakao': {
      id: '/kakao';
      path: '/kakao';
      fullPath: '/kakao';
      preLoaderRoute: typeof KakaoImport;
      parentRoute: typeof rootRoute;
    };
    '/signup/student': {
      id: '/signup/student';
      path: '/signup/student';
      fullPath: '/signup/student';
      preLoaderRoute: typeof SignupStudentImport;
      parentRoute: typeof rootRoute;
    };
    '/signup/teacher': {
      id: '/signup/teacher';
      path: '/signup/teacher';
      fullPath: '/signup/teacher';
      preLoaderRoute: typeof SignupTeacherImport;
      parentRoute: typeof rootRoute;
    };
    '/student/library': {
      id: '/student/library';
      path: '/library';
      fullPath: '/student/library';
      preLoaderRoute: typeof StudentLibraryImport;
      parentRoute: typeof StudentRouteImport;
    };
    '/teacher/content': {
      id: '/teacher/content';
      path: '/content';
      fullPath: '/teacher/content';
      preLoaderRoute: typeof TeacherContentImport;
      parentRoute: typeof TeacherRouteImport;
    };
    '/teacher/dashboard': {
      id: '/teacher/dashboard';
      path: '/dashboard';
      fullPath: '/teacher/dashboard';
      preLoaderRoute: typeof TeacherDashboardImport;
      parentRoute: typeof TeacherRouteImport;
    };
    '/teacher/documents': {
      id: '/teacher/documents';
      path: '/documents';
      fullPath: '/teacher/documents';
      preLoaderRoute: typeof TeacherDocumentsImport;
      parentRoute: typeof TeacherRouteImport;
    };
    '/teacher/student': {
      id: '/teacher/student';
      path: '/student';
      fullPath: '/teacher/student';
      preLoaderRoute: typeof TeacherStudentImport;
      parentRoute: typeof TeacherRouteImport;
    };
    '/teacher/upload': {
      id: '/teacher/upload';
      path: '/upload';
      fullPath: '/teacher/upload';
      preLoaderRoute: typeof TeacherUploadImport;
      parentRoute: typeof TeacherRouteImport;
    };
    '/auth/': {
      id: '/auth/';
      path: '/auth';
      fullPath: '/auth';
      preLoaderRoute: typeof AuthIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/signup/': {
      id: '/signup/';
      path: '/signup';
      fullPath: '/signup';
      preLoaderRoute: typeof SignupIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/teacher/viewer/$documentId': {
      id: '/teacher/viewer/$documentId';
      path: '/viewer/$documentId';
      fullPath: '/teacher/viewer/$documentId';
      preLoaderRoute: typeof TeacherViewerDocumentIdImport;
      parentRoute: typeof TeacherRouteImport;
    };
  }
}

// Create and export the route tree

interface StudentRouteRouteChildren {
  StudentLibraryRoute: typeof StudentLibraryRoute;
}

const StudentRouteRouteChildren: StudentRouteRouteChildren = {
  StudentLibraryRoute: StudentLibraryRoute,
};

const StudentRouteRouteWithChildren = StudentRouteRoute._addFileChildren(
  StudentRouteRouteChildren,
);

interface TeacherRouteRouteChildren {
  TeacherContentRoute: typeof TeacherContentRoute;
  TeacherDashboardRoute: typeof TeacherDashboardRoute;
  TeacherDocumentsRoute: typeof TeacherDocumentsRoute;
  TeacherStudentRoute: typeof TeacherStudentRoute;
  TeacherUploadRoute: typeof TeacherUploadRoute;
  TeacherViewerDocumentIdRoute: typeof TeacherViewerDocumentIdRoute;
}

const TeacherRouteRouteChildren: TeacherRouteRouteChildren = {
  TeacherContentRoute: TeacherContentRoute,
  TeacherDashboardRoute: TeacherDashboardRoute,
  TeacherDocumentsRoute: TeacherDocumentsRoute,
  TeacherStudentRoute: TeacherStudentRoute,
  TeacherUploadRoute: TeacherUploadRoute,
  TeacherViewerDocumentIdRoute: TeacherViewerDocumentIdRoute,
};

const TeacherRouteRouteWithChildren = TeacherRouteRoute._addFileChildren(
  TeacherRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/student': typeof StudentRouteRouteWithChildren;
  '/teacher': typeof TeacherRouteRouteWithChildren;
  '/kakao': typeof KakaoRoute;
  '/signup/student': typeof SignupStudentRoute;
  '/signup/teacher': typeof SignupTeacherRoute;
  '/student/library': typeof StudentLibraryRoute;
  '/teacher/content': typeof TeacherContentRoute;
  '/teacher/dashboard': typeof TeacherDashboardRoute;
  '/teacher/documents': typeof TeacherDocumentsRoute;
  '/teacher/student': typeof TeacherStudentRoute;
  '/teacher/upload': typeof TeacherUploadRoute;
  '/auth': typeof AuthIndexRoute;
  '/signup': typeof SignupIndexRoute;
  '/teacher/viewer/$documentId': typeof TeacherViewerDocumentIdRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/student': typeof StudentRouteRouteWithChildren;
  '/teacher': typeof TeacherRouteRouteWithChildren;
  '/kakao': typeof KakaoRoute;
  '/signup/student': typeof SignupStudentRoute;
  '/signup/teacher': typeof SignupTeacherRoute;
  '/student/library': typeof StudentLibraryRoute;
  '/teacher/content': typeof TeacherContentRoute;
  '/teacher/dashboard': typeof TeacherDashboardRoute;
  '/teacher/documents': typeof TeacherDocumentsRoute;
  '/teacher/student': typeof TeacherStudentRoute;
  '/teacher/upload': typeof TeacherUploadRoute;
  '/auth': typeof AuthIndexRoute;
  '/signup': typeof SignupIndexRoute;
  '/teacher/viewer/$documentId': typeof TeacherViewerDocumentIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/student': typeof StudentRouteRouteWithChildren;
  '/teacher': typeof TeacherRouteRouteWithChildren;
  '/kakao': typeof KakaoRoute;
  '/signup/student': typeof SignupStudentRoute;
  '/signup/teacher': typeof SignupTeacherRoute;
  '/student/library': typeof StudentLibraryRoute;
  '/teacher/content': typeof TeacherContentRoute;
  '/teacher/dashboard': typeof TeacherDashboardRoute;
  '/teacher/documents': typeof TeacherDocumentsRoute;
  '/teacher/student': typeof TeacherStudentRoute;
  '/teacher/upload': typeof TeacherUploadRoute;
  '/auth/': typeof AuthIndexRoute;
  '/signup/': typeof SignupIndexRoute;
  '/teacher/viewer/$documentId': typeof TeacherViewerDocumentIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/student'
    | '/teacher'
    | '/kakao'
    | '/signup/student'
    | '/signup/teacher'
    | '/student/library'
    | '/teacher/content'
    | '/teacher/dashboard'
    | '/teacher/documents'
    | '/teacher/student'
    | '/teacher/upload'
    | '/auth'
    | '/signup'
    | '/teacher/viewer/$documentId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/student'
    | '/teacher'
    | '/kakao'
    | '/signup/student'
    | '/signup/teacher'
    | '/student/library'
    | '/teacher/content'
    | '/teacher/dashboard'
    | '/teacher/documents'
    | '/teacher/student'
    | '/teacher/upload'
    | '/auth'
    | '/signup'
    | '/teacher/viewer/$documentId';
  id:
    | '__root__'
    | '/'
    | '/student'
    | '/teacher'
    | '/kakao'
    | '/signup/student'
    | '/signup/teacher'
    | '/student/library'
    | '/teacher/content'
    | '/teacher/dashboard'
    | '/teacher/documents'
    | '/teacher/student'
    | '/teacher/upload'
    | '/auth/'
    | '/signup/'
    | '/teacher/viewer/$documentId';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  StudentRouteRoute: typeof StudentRouteRouteWithChildren;
  TeacherRouteRoute: typeof TeacherRouteRouteWithChildren;
  KakaoRoute: typeof KakaoRoute;
  SignupStudentRoute: typeof SignupStudentRoute;
  SignupTeacherRoute: typeof SignupTeacherRoute;
  AuthIndexRoute: typeof AuthIndexRoute;
  SignupIndexRoute: typeof SignupIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  StudentRouteRoute: StudentRouteRouteWithChildren,
  TeacherRouteRoute: TeacherRouteRouteWithChildren,
  KakaoRoute: KakaoRoute,
  SignupStudentRoute: SignupStudentRoute,
  SignupTeacherRoute: SignupTeacherRoute,
  AuthIndexRoute: AuthIndexRoute,
  SignupIndexRoute: SignupIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/student",
        "/teacher",
        "/kakao",
        "/signup/student",
        "/signup/teacher",
        "/auth/",
        "/signup/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/student": {
      "filePath": "student/route.tsx",
      "children": [
        "/student/library"
      ]
    },
    "/teacher": {
      "filePath": "teacher/route.tsx",
      "children": [
        "/teacher/content",
        "/teacher/dashboard",
        "/teacher/documents",
        "/teacher/student",
        "/teacher/upload",
        "/teacher/viewer/$documentId"
      ]
    },
    "/kakao": {
      "filePath": "kakao.tsx"
    },
    "/signup/student": {
      "filePath": "signup/student.tsx"
    },
    "/signup/teacher": {
      "filePath": "signup/teacher.tsx"
    },
    "/student/library": {
      "filePath": "student/library.tsx",
      "parent": "/student"
    },
    "/teacher/content": {
      "filePath": "teacher/content.tsx",
      "parent": "/teacher"
    },
    "/teacher/dashboard": {
      "filePath": "teacher/dashboard.tsx",
      "parent": "/teacher"
    },
    "/teacher/documents": {
      "filePath": "teacher/documents.tsx",
      "parent": "/teacher"
    },
    "/teacher/student": {
      "filePath": "teacher/student.tsx",
      "parent": "/teacher"
    },
    "/teacher/upload": {
      "filePath": "teacher/upload.tsx",
      "parent": "/teacher"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/signup/": {
      "filePath": "signup/index.tsx"
    },
    "/teacher/viewer/$documentId": {
      "filePath": "teacher/viewer/$documentId.tsx",
      "parent": "/teacher"
    }
  }
}
ROUTE_MANIFEST_END */
